Brainstorming
- "Modified Connect Four"
    - board with 7 x 5 slots (7 per row, 5 per column)
    - each player assigned a colour (red or blue)
    - red starts, alternating turns
    - each player drops coloured token into column, token drops to lowest available slot in column (if none, doesn't drop)
    - when player has four coloured tokens in a row (vertically, horizontally, or diagonally), receives one point
    - when all slots filled, winning player and final score displayed on screen (but if equal, tie)

Schedule + progress:
- [x] learn Java game basics by Nov. 10
- [ ] UML diagram by Nov. 11
- [x] algorithm by Nov. 14
- [x] code basic window by Nov. 16
- [x] code getting user input by Nov. 16
- [x] code game board by Nov. 17
- [x] code game logic by Nov. 19
- [ ] gather feedback by Nov. 21
- [ ] fix bugs + use feedback by Nov. 22

Division of labour:
- Sameer: initialize window, design game board, get user inputs (algorithm + code)
- Nuzhat: render animations, game logic (point tracking, initiate game over, etc.) (algorithm + code)
- Both: game description, UML diagram, prototype

Prototype
- create window titled "Modified Connect Four" (all graphics described in proceeding steps to be displayed on this window)
- display instructions on top left (LEFT/RIGHT arrow keys to select column, SPACE to drop token, winner has most four-in-a-rows),
game board (brown rectangle with circles of same colour as background (grey) in 7 x 5 pattern), and red token hovering over fourth
column; move token to nearest left or nearest right column in response to LEFT/RIGHT arrow keys pressed
- on SPACE pressed, get rid of instructions, show scoreboard on top left ("Player RED - 0" and "Player BLUE - 0"), fill lowest
background-coloured circle in column token was originally hovering over with red (same colour as hovering token), change colour
of hovering token to blue (if hovering token were originally blue, would be changed to red)
- continue with pattern (LEFT/RIGHT to changing columns, SPACE to fill lowest grey circle in same column as hovering token and
change hovering token's colour to other red or blue, depending on what it last was)
- if any one token colour fills in four of board's circles in a row (horizontally, vertically, or diagonally), one point for
player of that colour; update scoreboard accordingly
- when all slots filled, get rid of scoreboard and display final score in centre of window above hovering token (if one player
has more points than another: "Player [player's colour] wins [final score]"; if tie: "Tie game [final score]")

Algorithm
- variables (referenced using []):
    - board = image (created when game is run)
    - bkgdcolour = RGB 240-240-240
    - boardwid = 470, boardheight = 320
    - spacing = 15, xshift = 80, yshift = 100
    - slotwid = (boardwid - 8*spacing) / 7
    - slots = two-dimensional array (size 7 x 5) to store colour (red, blue, or neither) of each slot in game board
    - points = list to store instances of class Points (add to throughout game)
- helper methods (ordered alphabetically; later organize in classes)
    - findX(int column): [spacing] + [xshift] + [column]*([spacing] + [slotwid])
    - findY(int row): [boardheight] + [yshift] - [spacing] - [slotwid] - [row]*([spacing] - 5 + [slotwid])

- initialize window
    - set size to 640 x 480
    - disable ability for user to resize
    - set location to centre of screen
    - close (+ stop game) when "X" button pressed
- game board (display on window) (whole board stored in variable [board])
    - create grey ([bkgdcolour]) rectangle covering whole window
    - create brown (RGB 150-75-0) [boardwid] x [boardheight] rectangle with top [yshift] away from top of screen
    - create circles (coloured bkgdcolour) with diameter [slotwid] in 7 x 5 pattern across rectangle
        * create each circle one by one, use for loop to iterate through each
        - circles along each row positioned [spacing] apart
        - circles along each column positioned [spacing - 5] apart
    - display instructions (in bolded Arial size 14)
        - "> Press LEFT/RIGHT to position" positioned 10 right, 20 from top
        - "> Press SPACE to drop" positioned 1 below last
        - "> Game over when board is full" positioned 1 below last
        - "> Player with most rows of four wins!" positioned 1 below last
- game loop
    - set local variable now to current time, set local variable lastRender to current time
    - in infinite loop:
        - set [now] to current time
        - check how much time has passed from [lastRender] to [now]
        - if time passed is greater or equal to one twentieth of a second:
            - redraw [board]
            - iterate through [points] and use drawCircling() method associated with each object
            - display current position (i.e. column) of hovering token (represents player)
            - set [lastRender] to current time
            - end of if block
        - go back to top of loop
- if LEFT arrow key pressed, move hovering token to nearest column to its left
- if RIGHT arrow key pressed, move hovering token to nearest column to its right
- if ENTER key pressed:
    - set colour of lowest slot that's neither red nor blue under current position of hovering token to hovering token's colour
    - check if any 

** RGB 130-65-0

Test cases
[...]

Feedback
[...]
