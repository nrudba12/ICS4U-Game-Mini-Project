Brainstorming
- "Modified Connect Four"
    - board with 7 x 5 slots (7 per row, 5 per column)
    - each player assigned a colour (red or blue)
    - red starts, alternating turns
    - each player drops coloured token into column, token drops to lowest available slot in column (if none, doesn't drop)
    - when player has four coloured tokens in a row (vertically, horizontally, or diagonally), receives one point
    - when all slots filled, winning player and final score displayed on screen (but if equal, tie)

Schedule + progress:
- [x] learn Java game basics by Nov. 10
- [x] UML diagram by Nov. 11
- [x] algorithm by Nov. 14
- [x] code initialized window by Nov. 16
- [x] code getting user input by Nov. 16
- [x] code game board by Nov. 17
- [x] code game logic by Nov. 20
- [x] gather feedback by Nov. 22
- [x] implement feedback by Nov. 25

Division of labour:
- Sameer: initialize window, design game board, get user inputs (algorithm + code)
- Nuzhat: render animations, game logic (point tracking, initiate game over, etc.) (algorithm + code)
- Both: game description, UML diagram, prototype

Prototype
- create window titled "Modified Connect Four" (all graphics described in proceeding steps to be displayed on this window)
- display instructions on top left (LEFT/RIGHT arrow keys to select column, SPACE to drop token, winner has most four-in-a-rows),
game board (brown rectangle with circles of same colour as background (grey) in 7 x 5 pattern), and red token hovering over fourth
column; move token to nearest left or nearest right column in response to LEFT/RIGHT arrow keys pressed
- on SPACE pressed, get rid of instructions, show scoreboard on top left ("Player RED - 0" and "Player BLUE - 0"), fill lowest
background-coloured circle in column token was originally hovering over with red (same colour as hovering token), change colour
of hovering token to blue (if hovering token were originally blue, would be changed to red)
- continue with pattern (LEFT/RIGHT to changing columns, SPACE to fill lowest grey circle in same column as hovering token and
change hovering token's colour to other red or blue, depending on what it last was)
- if any one token colour fills in four of board's circles in a row (horizontally, vertically, or diagonally), one point for
player of that colour; update scoreboard accordingly
- when all slots filled, get rid of scoreboard and display final score in centre of window above hovering token (if one player
has more points than another: "Player [player's colour] wins [final score]"; if tie: "Tie game [final score]")

Algorithm
- initializing:
    - initialize window titled "Modified Connect Four"
    - create game board (grey background, brown rectangle covered with background-coloured circles in 7 x 5 pattern)
    - display instructions on top left
        - "> Press LEFT/RIGHT to position"
        - "> Press SPACE to drop"
        - "> Game over when board is full"
        - "> Player with most rows of four wins!"
- game logic:
    - display red circle hovering over fourth column of circle in game board
    - array "slots" to represent all circles on board (size 7 x 5, each element initialized to '0')
    - list "points" to represent every point earned (each object in "points" has its own coordinates and row-of-four type)
    - integer "movesRemaining" to represent number of background-coloured circles on board (initialized to 35)
    - if LEFT/RIGHT arrow key pressed, move circle to hover over its nearest left or right (depending on key pressed) column
    - if SPACE key pressed:
        - if no background-coloured circle below hovering circle: do nothing
        - else:
            - colour lowest background-coloured circle below hovering circle with the colour of hovering circle (e.g. if hovering
            circle is red, lowest circle would be coloured red)
            - update element representing previously background-coloured circle in "slots" to its new colour
            - for next two steps, refer to lines 71-88
                - check how many rows of four created (horizontally, vertically, and/or diagonally) by newly-coloured circle
                - update scoreboard according to how many points earned by rows of four created
            - if instructions currently in top left, initialize score board:
                - get rid of instructions
                - create scoreboard on top left: "Player RED - 0"; "Player BLUE - 0"
            - if hovering circle was red, change to blue; if hovering circle was blue, change to red
            - minus one from "movesRemaining"
    - to check how many rows of four created by newly-coloured circle:
        - horizontally: get colour of every circle in same row as newly-coloured circle (use "slots")
        - vertically: get colour of every circle in same column as newly-coloured circle (use "slots")
        - diagonally (in "/" shape): get colour of every circle in same "/"-shaped row as newly-coloured circle (use "slots")
        - diagonally (in "\" shape): get colour of every circle in same "\"-shaped row as newly-coloured circle (use "slots")
        - for all:
            - check if row has any rows of four of same colour as hovering circle
            - if not: do nothing (no new rows of four created)
            - else:
                - find location of left-most circle in left-most row of four (for vertical, bottom-most)
                - check if "points" has any objects whose coordinates at same position as left-most circle in row of four and whose
                row-of-four type is the same as the type of row of four being checked (can be horizontal, vertical, "/", or "\")
                - if so, do nothing
                - else:
                    - player represented by hovering circle earns one more point
                    - create new object with coordinates representing left-most circle (or if vertical, bottom-most) and with
                    row-of-four type of whichever type of row of four was being checked for
                - repeat else block for every row of four created by newly-coloured circle
    - if "movesRemaining" equals 0:
        - if scoreboard is tied: display "Tie game [score]!" in centre of window above hovering token
        - else: display "Player [player with more points] wins [score]!" in centre of window above hovering token
- game loop (renders all graphics)
    - repeat 20 times per second:
        - render game board
        - for each object in "points": circle each row of four represented by object (implementation will be more specific when
        creating actual code) with green line
        - display hovering token using its current position and its current colour
